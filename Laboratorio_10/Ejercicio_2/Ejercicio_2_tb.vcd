$date
	Sat Nov 07 20:43:37 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! ZERO $end
$var wire 4 " SAL [3:0] $end
$var wire 4 # DATA [3:0] $end
$var wire 1 $ C $end
$var wire 4 % ALU_SAL [3:0] $end
$var wire 4 & ACCU [3:0] $end
$var reg 1 ' ENA $end
$var reg 1 ( ENB $end
$var reg 1 ) ENC $end
$var reg 4 * OPRND [3:0] $end
$var reg 3 + S [2:0] $end
$var reg 1 , clk $end
$var reg 1 - reset $end
$scope module A1 $end
$var wire 4 . ACCUMULATOR [3:0] $end
$var wire 4 / ALU_SAL [3:0] $end
$var wire 4 0 DATA [3:0] $end
$var wire 1 ' ENA $end
$var wire 1 ( ENB $end
$var wire 1 ) ENC $end
$var wire 4 1 OPRND [3:0] $end
$var wire 3 2 S [2:0] $end
$var wire 1 , clk $end
$var wire 1 - reset $end
$var wire 1 ! ZERO $end
$var wire 4 3 SAL [3:0] $end
$var wire 1 $ C $end
$var wire 4 4 BUFFER [3:0] $end
$var wire 4 5 ALU [3:0] $end
$var wire 4 6 ACCU [3:0] $end
$scope module R1 $end
$var wire 3 7 S [2:0] $end
$var wire 1 ! ZERO $end
$var wire 4 8 SAL [3:0] $end
$var wire 1 $ C $end
$var wire 4 9 BUFFER [3:0] $end
$var wire 4 : ACCU [3:0] $end
$var reg 5 ; OF [4:0] $end
$upscope $end
$scope module R2 $end
$var wire 1 ( EN $end
$var wire 4 < I [3:0] $end
$var wire 4 = Y [3:0] $end
$upscope $end
$scope module R3 $end
$var wire 1 ) EN $end
$var wire 4 > I [3:0] $end
$var wire 4 ? Y [3:0] $end
$upscope $end
$scope module R4 $end
$var wire 4 @ ALU [3:0] $end
$var wire 1 ' EN $end
$var wire 1 , clk $end
$var wire 1 - reset $end
$var reg 4 A ACCU [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
x-
x,
bx +
bx *
x)
x(
x'
bx &
bx %
x$
bx #
bx "
x!
$end
#2
b0 "
b0 3
b0 ?
1!
b0 %
b0 /
b0 5
b0 8
b0 >
b0 @
0$
b0 ;
b0 &
b0 .
b0 6
b0 :
b0 A
b0 +
b0 2
b0 7
1)
1(
1'
1-
0,
#3
1,
#4
0,
0-
#5
1,
#6
b1010 #
b1010 0
b1010 4
b1010 9
b1010 =
0,
b1010 *
b1010 1
b1010 <
#7
1,
#8
b1010 "
b1010 3
b1010 ?
0!
b1010 %
b1010 /
b1010 5
b1010 8
b1010 >
b1010 @
b1010 ;
0,
b10 +
b10 2
b10 7
#9
b1010 &
b1010 .
b1010 6
b1010 :
b1010 A
1,
#10
b0 "
b0 3
b0 ?
1!
b0 %
b0 /
b0 5
b0 8
b0 >
b0 @
b0 ;
0,
b1 +
b1 2
b1 7
#11
b110 "
b110 3
b110 ?
0!
b110 %
b110 /
b110 5
b110 8
b110 >
b110 @
1$
b10110 ;
b0 &
b0 .
b0 6
b0 :
b0 A
1,
#12
b1010 "
b1010 3
b1010 ?
b1010 %
b1010 /
b1010 5
b1010 8
b1010 >
b1010 @
0$
b1010 ;
0,
b11 +
b11 2
b11 7
#13
b100 "
b100 3
b100 ?
b100 %
b100 /
b100 5
b100 8
b100 >
b100 @
1$
b10100 ;
b1010 &
b1010 .
b1010 6
b1010 :
b1010 A
1,
#14
b0 %
b0 /
b0 5
b0 8
b0 >
b0 @
b10000 ;
b1111 #
b1111 0
b1111 4
b1111 9
b1111 =
bz "
bz 3
bz ?
0,
b1111 *
b1111 1
b1111 <
0)
b100 +
b100 2
b100 7
#15
b0 &
b0 .
b0 6
b0 :
b0 A
1,
#16
b1111 %
b1111 /
b1111 5
b1111 8
b1111 >
b1111 @
0$
b1111 ;
0,
b10 +
b10 2
b10 7
#17
b1111 &
b1111 .
b1111 6
b1111 :
b1111 A
1,
#18
b1111 "
b1111 3
b1111 ?
0,
1)
#19
1,
#20
0,
b0 +
b0 2
b0 7
#21
1,
#22
bz #
bz 0
bz 4
bz 9
bz =
0,
b1 *
b1 1
b1 <
0(
#23
1,
#24
bz "
bz 3
bz ?
x!
bz %
bz /
bz 5
bz 8
bz >
bz @
b0zzzz ;
0,
b10 +
b10 2
b10 7
#25
bz &
bz .
bz 6
bz :
bz A
1,
#26
b1 "
b1 3
b1 ?
0!
b1 %
b1 /
b1 5
b1 8
b1 >
b1 @
b1 ;
b1 #
b1 0
b1 4
b1 9
b1 =
0,
1(
#27
b1 &
b1 .
b1 6
b1 :
b1 A
1,
#28
0,
#29
1,
#30
0,
